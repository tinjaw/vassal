<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Expressions</title>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body>
<table cellpadding="2" cellspacing="2" border="0" width="100%">
  <tbody>
  <tr align="center">
  <td valign="top">
  <h1>VASSAL Reference Manual</h1> <small><a href="index.htm">Home</a>
  &gt; <b>&nbsp;Expressions</b></small><br><br>
  </td>
  </tr>
  <tr>
  <td valign="top">
  <hr width="100%" size="2">
  <h2>Expressions</h2>
  <img src="images/Expression.png" title="" alt=""><br>
  <br>
  Any field within the Vassal Editor that is followed by a Calculator icon <img src="images/calculator.png">allows the
  entry of an Expression. Expressions are essentially an in-line <a href="CalculatedProperty.htm">Calculated Property
  </a> that are re-evaluated whenever their value is required. There are two main flavors of Expression: <a href="#beanshell">BeanShell Expressions</a>
  which are identified by being surrounded by curly braces {}, and <a href="#simple">Simple Expressions</a> which are not. <br>
  <br>  
  When an expression (of either type) is used in e.g. a <a href="GlobalKeyCommand.htm">Global Key Command</a> to select which pieces to operate
  on by checking properties, it is called a <a href="PropertyMatchExpression.htm">Property Match Expression</a>. <br>

  <br>
  <b>NOTE:</b> Expressions should not be confused with <a href="MessageFormat.htm">Message Formats</a>, which are used by various
  <a href="GamePiece.htm#Traits">traits</a> and <a href="GameModule.htm#SubComponents">components</a> to generate messages. 
  Message Formats are far more limited than Expressions. They only allow the inclusion of Property values, they do not allow 
  any sort of calculations beyond potentially receiving the value of a Calculated Property. <br>

  <a name="beanshell"></a><h3>BeanShell Expressions</h3>
  BeanShell Expressions (named after the software package that implements them in Vassal) allow you to use arbitrarily
  complex formulae to define the value returned. BeanShell Expressions are marked by being surrounded by curly braces
  {}. The BeanShell processor is an accurate implementation of the Java programming language and BeanShell Expressions are
  made up of Java language components. You can use any introductory Java tutorial to learn more about the syntax of
  BeanShell Expressions. The basic components are as follows:<br>
  <br>
  <table border="1" cellpadding="4" cellspacing="0" style="font-family:monospace; line-height:150%;">
    <tr style="font-family:Serif; line-height:200%;">
    <th>Type</th>
    <th>Options</th>
    <th>Examples</th>
    <th>Notes</th>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Numbers</b></td>
    <td>&nbsp</td>							
    <td>{35}</td>
    <td style="font-family:Serif;">Vassal works with whole numbers. Decimal numbers are treated as Strings</td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Strings</b></td>
    <td>&nbsp</td>
    <td>{"German"}</td>
    <td style="font-family:Serif;">A String literal, or text message, must be enclosed in "" quotation marks</td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Substitution</b></td>
    <td>$..$</td>
    <td>{"$Nation$"}<br>
    {$Attack$}
    </td>
    <td style="font-family:Serif;">Property names enclosed by $..$ symbols immediately substitute the property value, based on the piece or component issuing the command. Not normally needed in BeanShell as there are simpler ways to use a property value in an expression, but sometimes useful in <a href="PropertyMatchExpression.htm">Property Match Expressions</a> to use properties from the issueing piece rather than target piece.</td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Properties</b></td>
    <td>&nbsp</td>
    <td>{Nation}<br>
    {LocationName}<br>
    {CurrentMap}<br>
    {playerName}</td>
    <td style="font-family:Serif;">Any word not enclosed in "" is interpreted as a <a href="Properties.htm">Property</a> name.<br>
    <br>
    Can refer by name to <a href="GlobalProperties.htm">Global Properties</a>, <a href="PropertyMarker.htm">Marker</a> and <a href="DynamicProperty.htm">Dynamic Properties</a> of pieces, and
    properties <a href="Properties.htm">exposed by traits</a>. The current value of the property will be used.
    </td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Arithmetic</b></td>
    <td>
    + Add<br>
    - Subtract<br>
    * Multiply<br>
    / Divide<br>
    % Modulo
    </td>
    <td>
    {(CurrentHP + 2) * (Damage - Resistance)}<br>
    {FirstName + "-" + Surname}<br>
    {Height * 10}<br>
    {width / 5}<br>
    {Level % 10}
    </td>
    <td style="font-family:Serif;">Using the + operator on two String will concatenate (join) them. If the values on both sides of the + look like
    whole numbers, Vassal will attempt to add them.<br>
    <br>
    Parentheses can be used to organize operations and/or override the ordinary order of operations.
    </td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>&nbsp;Comparison&nbsp;</b></td>
    <td>
    > Greater than<br>
    &lt; Less than<br>
    >= Not less than<br>
    &lt;= Not greater than<br>
    == Equals<br>
    != Not Equals<br>
    =~&nbsp;Match&nbsp;regular&nbsp;Expression
    </td>
    <td>
    {height&nbsp;>&nbsp;10&nbsp;&&&nbsp;width&nbsp;>=&nbsp;Level}<br>
    {length&nbsp;&lt;&nbsp;maxlength&nbsp;||&nbsp;breadth&nbsp;&lt;=&nbsp;maxbreadth}<br>
    {Nation=="Germany"}<br>
    {Army!="Allied"}<br>
    {Type=="^A$"}
    </td>
    <td style="font-family:Serif;">Comparison operators are used primarily in <a href="PropertyMatchExpression.htm">Property Match Expressions</a> 
    and also with the ? (ternary) operator.<br>
    <br>
    Parentheses can be used to organize operations and/or override the ordinary order of operations.
    </td>
    </tr>
    <tr>
    <td style="text-align:center; font-family:serif;"><b>Logical</b></td>
    <td>
    && Logical AND<br>
    || Logical OR<br>
    ! Logical NOT<br>
    () Grouping
    </td>
    <td>
    {Nation=="Germany" && Type=="Unit"}<br>
    {Nation=="Germany" || Type=="Unit"}<br>
    {Nation=="Germany" && Type=="Unit"}<br>
    {!isInUse}<br>
    {A==B && (C==1 || D==2)}
    </td>
    <td style="font-family:Serif;">Comparison operators are used primarily in <a href="PropertyMatchExpression.htm">Property Match Expressions</a> 
    and also in the If function.
    </td>
    </tr>

    <tr>
    <td style="text-align:center; font-family:serif;"><b>Ternary</b></td>
    <td>
    <i>Expr</i> <b>?</b> <i>IfTrue</i> <b>:</b> <i>IfFalse</i>    
    </td>
    <td>
    { (Nation=="Germany") ? "Axis" : "Allies" }<br>
    { (Nation=="Germany") ? 5 : 2 }<br>
    { States.contains(CurrentZone) ? 1 : 0 }<br>
    { IsRandom() ? "Heads" : "Tails" }<br>
    {A==B ? C : D}
    </td>
    <td style="font-family:Serif;">The Ternary or "?" operator can be thought of as posing a yes/no question: if the expression before the ? symbol evaluates as "true", then the value of the
    expression as a whole is equal to the middle ("if true") part of the expression; otherwise (initial part is false), the result is the right ("if false") side. 

    </td>
    </tr>


    <tr>
    <td style="text-align:center; font-family:serif;"><b>Math</b></td>
    <td>
    Math.abs(value1)<br>
    Math.min(value1, value2)<br>
    Math.max(value1, value2)<br>
    </td>
    <td>
    {Math.abs(Number - 5)}<br>
    {Math.min(Health, Armor)}<br>
    {Math.max(3, Random(6))}<br>
    </td>
    <td style="font-family:Serif;">
    <b>Math.abs()</b> Returns the absolute value of the numeric property <i>value1</i>.<br>
    <b>Math.min()</b> Returns the smaller of two numeric values.<br>
    <b>Math.max()</b> Returns the larger of two numeric values.<br>
    </td>
    </tr>


    <tr>
    <td style="text-align:center; font-family:serif;"><b>Property</b></td>
    <td>
    GetProperty(property)<br>
    GetMapProperty(property,map)<br>
    GetZoneProperty(property,zone)<br>
    GetZoneProperty(property,zone,map)<br>
    </td>
    <td>
    {GetProperty("Nation"+myNation)}<br>
    {GetMapProperty("Owner",CurrentMap)}<br>
    {GetZoneProperty("Militia","Georgia")}<br>
    {GetZoneProperty("Modifier",OldZone,OldMap)}<br>
    </td>
    <td style="font-family:Serif;">
    All <b>GetProperty()</b> family functions return the value of a named property. The name of the property
    can be constructed from an expression.<br>
    <b>GetMapProperty()</b> looks only on the specific map for the property. <br>
    <b>GetZoneProperty()</b> looks only in a specific zone (and if specified, map) for the property. <br>
    </td>
    </tr>

    <tr>
    <td style="text-align:center; font-family:serif;"><b>Random</b></td>
    <td>
    Random(value1)<br>
    Random(value1,value2)<br>
    IsRandom()<br>
    IsRandom(percent)<br>
    </td>
    <td>
    {Random(6)}<br>
    {Random(AttackPower,AttackPower * 2)}<br>
    {IsRandom()}<br>
    {IsRandom(75)}<br>
    </td>
    <td style="font-family:Serif;">
    <b>Random(value1)</b> returns a random number between 1 and <i>value1</i>.<br>
    <b>Random(value1,value2)</b> returns a random number between <i>value1</i> and <i>value2</i>.<br>
    <b>IsRandom()</b> returns "true" 50% of the time.<br>
    <b>IsRandom(percent)</b> returns "true" the specified percent of the time.
    </td>
    </tr>

    <tr>
    <td style="text-align:center; font-family:serif;"><b>String Methods</b></td>
    <td>
    .length()<br>
    .contains(string2)<br>
    .startsWith(string2)<br>
    .endsWith(string2)<br>
    .matches(regExpr)<br>
    .indexOf(string2)<br>
    .lastIndexOf(string2)<br>
    .substring(start)<br>
    .substring(start, end)<br>
    .replace(old, new)
    </td>
    <td>
    { LocationName.length() }<br>
    { States.contains("Arkansas") }<br>
    { OwnerString.startsWith("Axis") }<br>
    { MaybeQuestion.endsWith("?") }<br>
    { String.matches("[^abc]") } <br>
    { WhereIsTheColon.indexOf(":") } <br>
    { MaybeLotsOfDivs.lastIndexOf("div") } <br>
    { CurrentZone.substring(5) } <br>
    { PlayerName.substring(1,5) } <br>
    { GetProperty("XX").replace("A","YY") }
    </td>
    <td style="font-family:Serif;">
    <b>length()</b> the length in characters of the string.<br>
    <b>contains(string2)</b> true if <i>string2</i> is a substring of the original string.<br>
    <b>startsWith(string2)</b> true if <i>string2</i> is the starting sequence of the original string.<br>
    <b>endsWith(string2)</b> true if <i>string2</i> is the final sequence of the original string.<br>
    <b>matches(regex)</b> true if the original string matches the regular expression <i>regex</i>.<br>
    <b>indexOf(string2)</b> the first index where <i>string2</i> can be found in the original string.<br>
    <b>lastIndexOf(string2)</b> the last index where <i>string2</i> begins within the original string.<br>
    <b>substring(start)</b> from character indexed by <i>start</i>, the rest of the string.<br>
    <b>substring(start,end)</b> returns the substring between two indices.<br>
    <b>replace(old,new)</b> the original string with all instances of the string <i>old</i> replaced by the string <i>new</i>
    </td>
    </tr>


    <tr>
    <td style="text-align:center; font-family:serif;"><b>Sum and Count</b></td>
    <td>
    SumStack(propertyName)<br>
    Sum(prop, expression)<br>
    Sum(prop, expr, map)<br>
    Count(expr)<br>
    Count(expr, map)<br>
    </td>
    <td>
    {SumStack("Attack")}<br>
    {Sum("Defense", "{Type != \"Artillery\"}")}<br>
    {Sum("Cost", "{ Value > 0 }", "Purchases")}<br> 
    {Count("{ Nation == \"$Nation$\" }")}<br>
    {Count("{ CombatValue > 0 }", "BattleMap") }<br>
    </td>
    <td style="font-family:Serif;">
    <b>SumStack(prop)</b> returns the total of the specified property in all pieces in the same stack as this one.<br>
    <b>Sum(prop, expr)</b> returns the total of the specified property for all pieces in the game matching the expression.<br>
    <b>Sum(prop, expr, map)</b> returns the total of the specified property for all pieces on a specific map matching the expression.<br>
    <b>Count(expr)</b> returns the number of pieces in the game that match the expression.<br>
    <b>Count(expr, map)</b> returns the number of pieces on a specific map matching the expression.<br>
    <br>
    <b>NOTE:</b> Except for SumStack, these functions can have substantial performance cost as they must check all of the pieces on the map or in the entire game
    against the expression. Also, because Java requires that the expression itself must be passed as a string, the syntax is tricky here and
    quotation marks inside the expression must be quoted as \"<br>
    </td>
    </tr>

    <tr>
    <td style="text-align:center; font-family:serif;"><b>Alert</b></td>
    <td>
    Alert(message)<br>
    </td>
    <td>
    {Alert("Adding 1 to HP")}<br>
    </td>
    <td style="font-family:Serif;">
    <b>Alert</b> displays a message in a popup dialog box, to the currently active player only. If a message needs to be shown to <i>all</i> players, the recommended method is to send something to the Chat Log e.g. with a <a href="ReportChanges.htm">Report Action</a> trait or other <a href="MessageFormat.htm">Message Format</a> field.<br>
    </td>
    </tr>
  </table>
  <a name="simple"></a><h3>Simple Expressions</h3>
  Simple expressions are not surrounded by braces and exist to provide compatibility with earlier versions of Vassal that only
  implemented a much simpler version of Expressions. Simple Expressions are far more limited than BeanShell Expressions,
  only allowing the substitution of property values into a pre-determined string. If you are learning VASSAL for the first
  time, it is recommended that you mostly use the more powerful BeanShell Expressions.<br>
  <table>
    <tr>
    <td width="20%">A Simple Integer Expression:</td>
    <td><img src="images/SimpleExpression1.png"></td><td>A whole number. In general, Vassal does not support decimal
    numbers, except when stored and used as Strings.</td>
    </tr>
    <tr>
    <td>A basic Simple String Expression:</td>
    <td><img src="images/SimpleExpression2.png"></td><td>A String in a Simple Expression is defined without quotation
    marks.</td>
    </tr>
    <tr>
    <td>A more complex example:</td>
    <td><img src="images/SimpleExpression3.png"></td><td>The string $Nation$ will be replaced by the value of the Nation
    property. You can use multiple $...$ strings in an expression ($Nation$-$Division$), but can NOT nest them
    ($Nation$Count$$).</td>
    </tr>
  </table>
  <br>
  <b>SEE ALSO:</b>&nbsp;<a href="Properties.htm">Properties</a>
  </td>
  </tr>
  <tr>
  </tr>
  </tbody>
</table>
<br>
</body>
</html>
