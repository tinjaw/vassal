<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Property Marker</title>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body>
<table border="0" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
  <tr align="center">
  <td valign="top">
  <h1>VASSAL Reference Manual</h1>
  <small><a href="index.htm">Home</a> &gt; <a href="GameModule.htm">Module</a>
  &gt; <a href="PieceWindow.htm">Game Piece Palette</a></small> <small>&gt;<b>
  </b><a href="GamePiece.htm">Game Piece</a></small> <small>&gt; <b>Marker</b></small><br>
  </td>
  </tr>
  <tr>
  <td valign="top">
  <hr size="2" width="100%">
  <h2>Marker<br>
  </h2>
  <table border="0" cellpadding="2" cellspacing="2" width="100%">
    <tbody>
    <tr>
    <td valign="top">A Marker trait is used to mark a game piece permanently as always having a particular <a
      href="Properties.htm">Property.</a> Unlike many other types of Properties that can be configured on and by
    pieces (e.g. <a href="DynamicProperty.htm">Dynamic Properties</a>), a Marker's value cannot change during play. In
    other words, it is like a <i>constant</i> rather than a <i>variable</i> in programming. <br>
    <br>
    Setting a property does not in itself give a game piece any particular behavior. The property must be
    recognized by some other trait or class in the module. Markers are can be referenced in <a
      href="Map.htm#GlobalKeyCommand">Global Key Command's</a> and <a href="Map.htm#GamePieceLayers">Game Piece Layer
    </a> traits and in many other traits within <a href="Expression.htm">Expressions</a> and <a
      href="MessageFormat.htm">Message Formats</a>.<br>
    <br>
    <b>Property Name:</b>&nbsp; The name of the property. This is how the property can be referenced in <a
      href="Expression.htm">Expressions</a> and <a href="MessageFormat.htm">Message Formats</a>.<br>
      <br>
    <b>Property Value:</b>&nbsp; The value of the property. This value will remain constant for this piece throughout
    play, but other pieces could have a Marker of the same name but with a different value. (Example: some pieces could
    have a Marker named <i>Type</i> whose value is <i>Infantry</i> while other pieces have a Marker also named <i>Type
    </i> but whose value is <i>Cavalry</i>. Pieces could also have an ArmorClass Marker with a numeric value. By using
    these Marker in expressions, e.g. <i>{ (Type == "Infantry") && (ArmorClass 
    < 5) }></i>various decisions about pieces could be made by traits.<br>
    <br>
    You can combine multiple name/value pairs by separating the names and values with a comma (','). To use a literal
    comma in a name or value, precede it with a backslash ('\').<br>
    <br>
    <b>EXAMPLE:</b>&nbsp; A Marker with property name "owner" and property value "sigmund" would return "sigmund" from
    getProperty("owner") or $owner$. Use commas to set multiple properties with a single Marker. A Marker
    with name "owner,status" and value "sigmund,unknown" would also return "unknown" from getProperty("status") or
    $status$.<br>
    <br>
    <b>SEE ALSO:</b>&nbsp; <a href="DynamicProperty.htm">Dynamic Property</a>, <a href="SetGlobalProperty.htm">Set
    Global Property</a>
    </td>
    <td valign="top"><img src="images/PropertyMarker.png" alt=""><br>
    </td>
    </tr>
    </tbody>
  </table>
  <hr size="2" width="100%"></td>
  </tr>
  </tbody>
</table>
</body>
</html>
